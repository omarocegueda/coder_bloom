#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>
#include <random>
#include <sstream>
#include <fstream>

int64_t SolveLinear(const int32_t c, const int32_t n, std::vector<int32_t> C, std::vector<int32_t> N) {
  std::sort(C.begin(), C.end());
  std::sort(N.begin(), N.end());
  int32_t i=0;
  int32_t j=0;
  int64_t candies = 0;
  while(i<n) {
    while(j<c && C[j]<=N[i]) {
      ++j;
    }
    candies += j;
    ++i;
  }
  return candies;
}

int64_t SolveQuadratic(const int32_t c_, const int32_t n_, std::vector<int32_t> C, std::vector<int32_t> N) {
  int64_t candies = 0;
  for(int32_t n : N) {
    for(int32_t c : C) {
      if(c<=n) {
        ++candies;
      }
    }
  }
  return candies;
}

void WriteCase(const int32_t case_index, const int32_t c_, const int32_t n_, std::vector<int32_t> C, std::vector<int32_t> N, const int64_t sol, std::default_random_engine& engine) {
  shuffle(C.begin(), C.end(), engine);
  shuffle(N.begin(), N.end(), engine);
  // Write input
  {
    std::ostringstream os;
    os<<"case_"<<case_index<<".in";
    std::ofstream F;
    F.open(os.str());
    F<<c_<<" "<<n_<<std::endl;
    for(const int32_t c : C) {
      F << c << " ";
    }
    for(const int32_t n : N) {
      F << n << " ";
    }
    F << std::endl;
    F.close();
  }
  // Write output
  {
    std::ostringstream os;
    os<<"case_"<<case_index<<".out";
    std::ofstream F;
    F.open(os.str());
    F << sol << std::endl;
    F.close();
  }
}

void GenerateCase(const int32_t case_index, const int32_t c_, const int32_t n_, const int32_t k, std::default_random_engine& engine) {
  assert(k <= std::min(c_, n_));
  std::cerr << "Generating case "<< case_index<<std::endl;
  // Generate `k` integers in the middle of the valid range
  const int32_t kMargin = 10*1000;
  const int32_t kBottom = 250 *1000;
  const int32_t kMid =    500 *1000;
  const int32_t kTop =    1000*1000;

  std::uniform_int_distribution<int64_t> uniform_bottom(1, kBottom-kMargin);
  std::uniform_int_distribution<int64_t> uniform_mid(kBottom, kMid-kMargin);
  std::uniform_int_distribution<int64_t> uniform_top(kMid+kMargin, kTop);
  std::uniform_int_distribution<int64_t> uniform_delta(0, kMargin);

  std::vector<int32_t> C(c_);
  std::vector<int32_t> N(n_);
  for(int i=0; i<k; ++i) {
    C[i] = uniform_mid(engine);
    N[i] = C[i] + uniform_delta(engine);
    // Now S[i] >= C[i] and x < S[i] < y for all x generated by `uniform_bottom`, and y generated by `uniform_top` 
  }
  // Now generate N-k integers for C[:] and corresponding S[:], all of S[:] strictly less than those in C[:] 
  for(int i=k; i<std::min(c_, n_);++i) {
    C[i] = uniform_top(engine);
    N[i] = uniform_bottom(engine);
  }
  // Generate remaining elements
  for(int i=k;i<c_;++i) {
    C[i] = uniform_mid(engine);
  }
  for(int i=k;i<n_;++i) {
    N[i] = uniform_mid(engine);
  }
  int64_t sol = SolveLinear(c_, n_, C, N);
  
  std::cerr << "c="<<c_<<", n="<<n_ <<", k="<<k<<", sol="<<sol;
  if(static_cast<int64_t>(c_) * static_cast<int64_t>(n_) <=1000*1000*1000) {
    int64_t sol_quadratic = SolveQuadratic(c_, n_, C, N);
    if(sol!=sol_quadratic) {
      std::cerr << ". Incorrect: sol="<<sol <<", sol_quadratic="<<sol_quadratic<<std::endl;
    }
    assert(sol == sol_quadratic);
    std::cerr << ". Verified."<<std::endl;
  } else {
    std::cerr << ". Not verified."<<std::endl;
  }
  WriteCase(case_index, c_, n_, C, N, sol, engine);
}


void GenerateCases() {
  std::random_device rd;
  std::default_random_engine engine(rd());
  GenerateCase(0, 10, 15,      7,      engine);
  GenerateCase(1, 75, 50,      28,     engine);
  GenerateCase(2, 100, 109,     79,     engine);
  GenerateCase(3, 280000, 250000,     8,      engine);
  GenerateCase(4, 410000, 400000,     490,    engine);
  GenerateCase(5, 100000, 102000,    503,    engine);
  GenerateCase(6, 230000, 200000,    21,     engine);
  GenerateCase(7, 100000, 190000,   9875,   engine);
  GenerateCase(8, 150000, 100000,  58921,  engine);
  GenerateCase(9, 500000, 500000, 282321, engine);
}

void Solve() {
  int32_t c, n;
  std::cin >> c >> n;
  std::vector<int32_t> C(c);
  std::vector<int32_t> N(n);
  for(int i=0;i<c;++i) {
    std::cin >> C[i];
  }
  for(int i=0;i<n;++i) {
    std::cin >> N[i];
  }
}
int main() {
  GenerateCases();
  return 0;
}